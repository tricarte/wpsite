#!/usr/bin/env bash
##############################################################################
#  wpsite: Easily create composer and wpstarter based WP test installations  #
##############################################################################

# set -x # Print any command before running
# set -u # Treat unset variables as errors
# You have to use ${VAR:-} everywhere when using set -u
# set -E # You must use this if you want "trap" apply to everything including subshells.
set -eo pipefail # Exit when a command and any command in a pipe fails

[[ -n ${SUDO_USER:-} ]] && { _e "sudo detected, exiting normally!"; exit; }

#############################################
#         Edit below to your liking         #
#############################################

# MySQL/MariaDB credentials
DBUSER="root"
DBPASS="vagrant"

# Where to host sites using valet-linux
SITESDIR="$HOME/sites"

# Where to store/retore backups
BACKUPSDIR="$HOME/backups/sites"

WPSTARTERREPO="https://github.com/tricarte/wpready3"

# Clone of above repo, downloadable with "wpsite clone-repo"
WPSTARTERDIR="$HOME/repos/wpready3"

# How many backups to keep while using "wpsite backup your-site --purge"
NUMBACKUPSTOKEEP=2

#############################################
#             OK, Stop editing              #
#############################################

###################
#  Prerequisites  #
###################
VALET=$(command -v valet)
if [ ! $? ]; then
    _e "Err: valet-linux is not installed."
    exit 1
fi

GIT=$(command -v git)
if [ ! $? ]; then
    _e "Err: git is not installed."
    exit 1
fi

WP=$(command -v wp)
if [ ! $? ]; then
    _e "Err: WPCLI is not installed."
    exit 1
fi

COMPOSERBIN=$(command -v composer)
if [ ! $? ]; then
    _e "Err: Composer cli is not installed."
    exit 1
fi

MYSQLBIN=$(command -v mysql)
if [ ! $? ]; then
    _e "Err: mysql/mardiadb client is not installed."
    exit 1
fi
##########################
#  End of prerequisites  #
##########################

WORKING_DIR_ORIGINAL="$(pwd)"

red='\033[0;31m'
green='\033[0;32m'
purple='\033[0;35m'
normal='\033[0m'

# Utility functions
# https://github.com/CodelyTV/dotly/blob/master/installer#L21
_w() {
  local -r text="${1:-}"
  echo -e "$text"
}
_a() { _w " > $1"; }
_e() { _a "${red}$1${normal}"; }
_s() { _a "${green}$1${normal}"; }

function createTmpDir() {
    tmpDir="/tmp/$(basename "$0").$RANDOM.$RANDOM.$RANDOM.$$"
    (umask 077 && mkdir -p "${tmpDir}") || \
        { _e "Could not create temporary directory! Exiting."; exit 1; }
}

# function openBrowser()
# Used by sub_restore() and sub_create()
function openBrowser() {
    if [[ -n "$XDG_CURRENT_DESKTOP" ]]; then
        $WP admin --skip-plugins --path="$SITESDIR/$1/public/cms" > /dev/null 2>&1
    fi
    return
}

function deleteSite() {
    mysql -u $DBUSER -p$DBPASS -e "DROP DATABASE IF EXISTS \`$1\`"
    rm -rf "${SITESDIR:?}/${1:?}"
    $VALET unlink "$DOCROOT" > /dev/null 2>&1
    _w "Site ${red}\"$1\"${normal} has been deleted."
    return
}

# Global option parsing
# https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f
PARAMS=""
while (( "$#" )); do
case "$1" in
    -y|--yes)
        PROCEED=1
        shift # Pop the first element off the array on each iteration.
        ;;
    -p|--purge)
        PURGE=1
        shift
        ;;
    -n|--no-browse)
        NOBROWSE=1
        shift
        ;;
    -r|--repo)
        if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
            REPO_PATH=$2
            shift 2
        else
            _e "Error: Argument for $1 is missing" >&2
            exit 1
        fi
        ;;
    --*|-*) # unsupported flags
        _e "Error: Unsupported flag $1" >&2
        exit 1
        ;;
    *) # preserve positional arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

progname=$(basename "$0")
subcommand=$1

#################
#  SUBCOMMANDS  #
#################

#################
#  sub_default  #
#################
function sub_default(){
    _w ""
    _w "Usage: ${purple}$progname <subcommand> [dir1] [dir2] OPTIONS${normal}"
    _w ""
    _w "Subcommands:"
    _w "    ${purple}create${normal}          Create a new WP site."
    _w "    ${purple}backup${normal}          Backup an existing WP site."
    _w "    ${purple}delete${normal}          Delete an existing WP site."
    _w "    ${purple}restore${normal}         Restore an existing WP site from backup."
    _w "    ${purple}rename${normal}          Rename an existing site."
    _w "    ${purple}list${normal}            List all wpstarter-enabled sites in \"$SITESDIR\"."
    _w "    ${purple}lang${normal}            Install a new language into an existing wpstarter installation."
    _w "    ${purple}quick${normal}           Quickly create a new WP test site without asking too much."
    _w "    ${purple}update${normal}          Apply \"composer update\" to the wpstarter repository."
    _w "    ${purple}admin${normal}           Open site's admin dashboard in browser."
    _w "    ${purple}boilerplate${normal}     Create boilerplate template backup for use with \"wpsite quick\" in \"$BACKUPSDIR\"."
    _w "    ${purple}clone-repo${normal}      Download wpstarter source repo from github."
    _w ""
    _w "For help with each subcommand run:"
    _w "${purple}$progname <subcommand> -h|--help${normal}"
    _w ""
    exit
}
export -f sub_default

##############
#  sub_list  #
##############
function sub_list(){
    subhelp=$1
    case $subhelp in
        "-h" | "--help")
            _w "Usage: $progname list"
            _w ""
            _w "       List all wpstarter-enabled sites in $SITESDIR."
            _w ""
            return
            ;;
    esac

    FD=$(command -v fd)
    if [ ! $? ]; then
        $FD wpstarter.json --max-depth 2 --type f --base-directory "$SITESDIR" --color never --exec dirname
    else
        find "$SITESDIR/" -maxdepth 2 -type f -name wpstarter.json -exec dirname {} \; | xargs -i basename {} -0
    fi

    return
}
export -f sub_list

#####################
#  sub_boilerplate  #
#####################
function sub_boilerplate(){
    subhelp=$1
    case $subhelp in
        "-h" | "--help")
            _w "Usage: $progname boilerplate"
            _w ""
            _w "       Create a boilerplate template backup for use with \"wpsite quick\" in \"$BACKUPSDIR\"."
            _w ""
            return
            ;;
    esac

    if [[ -d "$SITESDIR/boiler" ]]; then
        wpsite delete boiler
    fi
    _w "Temporary site ${purple}\"boiler\"${normal} is being created..."
    wpsite create boiler devnull -n > /dev/null 2>&1 && \
    _w "Backing up ${purple}\"boiler\"${normal} for later use..."
    wpsite backup boiler > /dev/null 2>&1 && \
    _w "Removing temporary site..."
    wpsite delete boiler  -y > /dev/null 2>&1

    # Delete everything but the last backup.
    _w "Removing older versions of the boilerplate from ${purple}\"$BACKUPSDIR/boiler\"${normal}..."
    cd "$BACKUPSDIR/boiler" || exit
    mapfile -t BACKUPSLIST < <(find -- * -maxdepth 0 -type d -printf "%f\n" -regextype 'posix-extended' -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$")
    for (( i = 0; i < ( ${#BACKUPSLIST[@]} - 1 ); i++ )); do
        rm -rf "${BACKUPSLIST[i]}"
    done
    _w "DONE."

    _w ""
    _w "Boilerplate template created in ${red}\"$BACKUPSDIR\"${normal}."
    _w "Now you can use ${purple}\"wpsite quick\"${normal}"
    _w "to create sites based on that template."

    return
}
export -f sub_boilerplate

################
#  sub_update  #
################
function sub_update(){
    subhelp=$1
    case $subhelp in
        "-h" | "--help")
            _w "Usage: $progname update"
            _w ""
            _w "       Update composer packages in wpstarter source repository."
            _w ""
            return
            ;;
    esac

    # Check source repo exists.
    if [[ ! -d "$WPSTARTERDIR" ]]
    then
        _e "Err: wpstarter repository does not exist."
        _e "It was searched in $WPSTARTERDIR".
        return 1
    fi

    if [[ ! $PROCEED ]]; then
        read -p "Composer packages in wpstarter repository will be updated! Proceed?  (y/n) (Default No): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]
        then
            _w "Update aborted."
            return 1
        fi
    fi

    createTmpDir

    cp "$WPSTARTERDIR/composer.lock" "$tmpDir/composer.lock"
    # result=$(diff -sq "$WPSTARTERDIR/composer.lock" /tmp/composer.lock )

    _w "Updating composer packages..."
    $COMPOSERBIN --working-dir="$WPSTARTERDIR" update -q

    if grep -q "identical" <<< "$(diff -sq "$WPSTARTERDIR/composer.lock" "$tmpDir/composer.lock")"; then
        _w "No updates are available."
        return
    else
        git --git-dir="$WPSTARTERDIR/.git" --work-tree="$WPSTARTERDIR" add composer.lock
        git --git-dir="$WPSTARTERDIR/.git" --work-tree="$WPSTARTERDIR" commit -m"versions updated"
        _w "$WPSTARTERDIR updated."
        _w ""
        _w "Now creating a boilerplate site based on the updated repository"
        _w "to be later used with ${purple}\"wpsite quick\"${normal}."
        _w ""
        $progname boilerplate
    fi

    return
}
export -f sub_update

#################
#  sub_restore  #
#################
function sub_restore(){
    subhelp=$1
    case $subhelp in
        "" | "-h" | "--help")
            _w "Usage: $progname restore <site_name> [new_site_name] [-n|--no-browse]"
            _w ""
            _w "       The backup named <site_name> inside $BACKUPSDIR"
            _w "       will be restored either to the same name"
            _w "       or to [new_site_name] inside $SITESDIR."
            _w ""
            return
            ;;
    esac

    DOCROOT=$1
    NEWDOCROOT=$2

    FINALDIR=""

    if [[ -z $DOCROOT ]] ; then
        _e "Err: Specify a directory to restore. It will be searched in $BACKUPSDIR."
        return 1
    fi

    if [[ -n $NEWDOCROOT ]] ; then
        if [[ -d "$SITESDIR/$NEWDOCROOT" ]]
        then
            _e "Err: A site with the name \"$NEWDOCROOT\" is already available."
            return 1
        fi
    fi

    # Exit if a site with the same name already exists
    if [[ -d "$SITESDIR/$DOCROOT" ]] && [[ -z $NEWDOCROOT ]]; then
        _e "Err: A site with the name \"$DOCROOT\" is already available."
        return 1
    fi

    # Exit if backup directory does not exist.
    if [[ ! -d "$BACKUPSDIR/$DOCROOT" ]]
    then
        _e "Err: Backup directory 'boiler' does not exist in $BACKUPSDIR."
        _w "You can create one with \"wpsite boilerplate\"."
        return 1
    fi

    # Find the latest backup directory
    # LATEST_BACKUP=$( ls -t "$BACKUPSDIR/$DOCROOT" -1 | head -n1 )
    LATEST_BACKUP=$(find "$BACKUPSDIR"/"$DOCROOT"/* \
        -maxdepth 0 \
        -type d -printf '%f\n' \
        -regextype 'posix-extended' \
        -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$" | sort -nr | head -n1)

    # Exit if backups don't exist.
    if [[ ! -f "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/files.tar.gz" ]]
    then
        _e "Err: files.tar.gz does not exist."
        return 1
    fi

    # Exit if backups don't exist.
    if [[ ! -f "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/database.sql.gz" ]]
    then
        _e "Err: database.sql.gz does not exist."
        return 1
    fi

    createTmpDir

    if [[ -n $NEWDOCROOT ]] ; then
            mysql -u $DBUSER -p$DBPASS "$NEWDOCROOT" -e exit > /dev/null 2>&1 && \
                _e "Err: A database with the same new name already exists." && \
                return 1
            mysql -u $DBUSER -p$DBPASS -e"CREATE DATABASE \`$NEWDOCROOT\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" && \
                _w "Creating the database $NEWDOCROOT... DONE."
            gunzip < "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/database.sql.gz" | mysql -u $DBUSER -p$DBPASS "$NEWDOCROOT" && \
                _w "Importing the database backup... DONE."
            tar zxf "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/files.tar.gz" --checkpoint=.1000 -C "$tmpDir" && \
                _w "" && _w "Extracting files from backup... DONE."

            # Check if this is a wpstarter project
            if [[ ! -f "$tmpDir/$DOCROOT/wpstarter.json" ]]
            then
                _e "Err: wpstarter.json could not be found in the backup."
                _e "This may not be a wpstarter project. Aborting..."
                rm -rf "$tmpDir/${DOCROOT:?}"
                mysql -u $DBUSER -p$DBPASS -e "DROP DATABASE IF EXISTS $NEWDOCROOT"
                _w "Changes reverted. No backup is restored."
                return 1
            fi

            mv "$tmpDir/$DOCROOT" "$SITESDIR/$NEWDOCROOT"
            replace -s "$DOCROOT" "$NEWDOCROOT" -- "$SITESDIR/$NEWDOCROOT/.env"
            rm -f "$SITESDIR/$NEWDOCROOT/.env.cached.php"
            cd "$SITESDIR/$NEWDOCROOT/public" || exit
            wp search-replace "$DOCROOT" "$NEWDOCROOT" > /dev/null 2>&1
            _w "Performing search-replace in WordPress DB... DONE."
            wp user update usr"$NEWDOCROOT" --user_pass=pss"$NEWDOCROOT" > /dev/null 2>&1
            _w "Updating the admin user... DONE."
            rm -f "$SITESDIR/$NEWDOCROOT/public/content/db.php"
            wp plugin deactivate query-monitor > /dev/null 2>&1
            wp plugin activate query-monitor > /dev/null 2>&1

            FINALDIR=$NEWDOCROOT
        else
            mysql -u $DBUSER -p$DBPASS "$DOCROOT" -e exit > /dev/null 2>&1 && \
                _e "Err: A database with the same name already exists." && \
                return 1
            mysql -u $DBUSER -p$DBPASS -e"CREATE DATABASE \`$DOCROOT\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" && \
                _w "Creating the dabase $DOCROOT... DONE."
            gunzip < "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/database.sql.gz" | mysql -u $DBUSER -p$DBPASS "$DOCROOT" && \
                _w "Importing the database backup... DONE."
            tar zxf "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/files.tar.gz" --checkpoint=.1000 -C "$SITESDIR" && \
                _w "" && _w "Extracting files from backup... DONE."
            
            # Check if this is a wpstarter project
            if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]
            then
                _e "Err: wpstarter.json could not be found in the backup."
                _e "This may not be a wpstarter project. Aborting..."
                rm -rf "${SITESDIR:?}/${DOCROOT:?}"
                mysql -u $DBUSER -p$DBPASS -e "DROP DATABASE IF EXISTS $DOCROOT"
                _w "Changes reverted. No backup is restored."
                return 1
            fi

            FINALDIR=$DOCROOT
    fi

    # To determine the most recently created site for "wpsite last"
    touch "$SITESDIR/$FINALDIR/wpstarter.json"

    # Link valet
    cd "$SITESDIR/$FINALDIR/public" || exit
    $VALET link "$FINALDIR" > /dev/null 2>&1
    _w "$FINALDIR has been restored."

    if [[ $NOBROWSE ]]; then
        return
    else
        openBrowser "$FINALDIR"
    fi

    return
}
export -f sub_restore

################
#  sub_rename  #
################
function sub_rename(){
    subhelp=$1
    case $subhelp in
        "" | "-h" | "--help")
            _w "Usage: $progname rename <site_name> <new_site_name>"
            _w ""
            return
            ;;
    esac

    DOCROOT=$1
    NEWDOCROOT=$2

    if [[ -z $DOCROOT ]] ; then
        _e "Err: Specify an existing site to rename. It will be searched in $SITESDIR."
        return 1
    elif [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: A site with the name \"$DOCROOT\" does not exist."
        return 1
    fi

    if [[ -n $NEWDOCROOT ]] ; then
        if [[ -d "$SITESDIR/$NEWDOCROOT" ]]; then
            _e "Err: A site with the name \"$NEWDOCROOT\" is already available."
            return 1
        fi
    else 
        _e "Err: You didn't specify a new name for the site."
        return 1
    fi

    if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]; then
        _e "Err: wpstarter.json could not be found in $DOCROOT."
        _e "This may not be a wpstarter project. Aborting..."
        return 1
    fi

    _w "Renaming site..."
    _w "This will take some time."
    _w ""

    $progname backup "$DOCROOT" > /dev/null 2>&1
    $progname restore "$DOCROOT" "$NEWDOCROOT" -n > /dev/null 2>&1
    $progname delete "$DOCROOT" -y > /dev/null 2>&1

    # Delete the created backup for this process
    LATEST_BACKUP=$(find "$BACKUPSDIR"/"$DOCROOT"/* \
        -maxdepth 0 \
        -type d -printf '%f\n' \
        -regextype 'posix-extended' \
        -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$" | sort -nr | head -n1)

    rm -rf "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP"
    # TODO: Delete empty directories in backups.

    _w "DONE."

    return
}
export -f sub_rename

################
#  sub_backup  #
################
function sub_backup(){
    subhelp=$1
    case $subhelp in
        "" | "-h" | "--help")
            _w "Usage: $progname backup <site_name> [-p|--purge]"
            _w ""
            _w "       The directory <site_name> in $SITESDIR will be backed up to $BACKUPSDIR."
            _w "       To delete older backups of <site_name> use --purge option."
            _w ""
            return
            ;;
    esac

    # Check if any argument is provided
    DOCROOT=$1

    # Exit if directory does not exist.
    if [[ ! -d "$SITESDIR/$DOCROOT" ]]
    then
        _e "Err: Directory does not exist. See \"wpsite backup -h\" for help."
        return 1
    else
        # Check if this is a wpstarter installation.
        if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]
        then
            _e "Err: $DOCROOT is not a WP installation that is installed via wpstarter."
            return 1
        fi
    fi

    if [[ $PURGE ]]; then
        # Delete older backups if there are more than $NUMBACKUPSTOKEEP.
        cd "$BACKUPSDIR/$DOCROOT" || exit
        mapfile -t BACKUPSLIST < <(find -- * -maxdepth 0 -type d -printf "%f\n" -regextype 'posix-extended' -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$")
        # mapfile -t BACKUPSLIST < <(find -- * -maxdepth 0 -type d ! -newer $TSTAMP)
        # BACKUPSLIST=( $(find "$BACKUPSDIR/$DOCROOT" -maxdepth 0 -type d -printf "%f\n" -regextype 'posix-extended' -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$") )
        # ! -newer $TSTAMP ! -name $TSTAMP

        if [[ ${#BACKUPSLIST[@]} -gt $NUMBACKUPSTOKEEP ]]; then
            read -p "Older backups will be deleted! Proceed?  (y/n) (Default No): " -r
            if [[ ! $REPLY =~ ^[Yy]$ ]]
            then
                _w "Removal of older backups aborted."
            else
                _w ""
                _w "Removing older backups..."
                for (( i = 0; i < ( ${#BACKUPSLIST[@]} - NUMBACKUPSTOKEEP ); i++ )); do
                    rm -rfv "${BACKUPSLIST[i]}"
                done
            fi
        else
            _w "You don't have more than $NUMBACKUPSTOKEEP backup[s] to purge."
            return 0
        fi
        return
    fi

    # Create backups directory.
    TSTAMP=$(date +%Y-%m-%d-%H%M%S)
    mkdir -p "$BACKUPSDIR/$DOCROOT/$TSTAMP"

    _w "Exporting database..."
    $WP db export \
        --path="$SITESDIR/$DOCROOT/public/cms" \
        - | gzip > "$BACKUPSDIR/$DOCROOT/$TSTAMP/database.sql.gz" && \
        _w "Exporting database DONE"

    _w "Exporting site files..."
    tar czf \
        "$BACKUPSDIR/$DOCROOT/$TSTAMP/files.tar.gz"  \
        --checkpoint=.1000 \
        --exclude=*.tar.gz --directory="$SITESDIR" "$DOCROOT" && \
        _w ""
        _w "Exporting site files DONE."

    cd "$WORKING_DIR_ORIGINAL"
    _w ""
    _w "Backup created in: $BACKUPSDIR/$DOCROOT/$TSTAMP"
    return
}
export -f sub_backup

################
#  sub_delete  #
################
function sub_delete(){
    subhelp=$1
    case $subhelp in
        "" | "-h" | "--help")
            _w "Usage: $progname delete <site_name1> <site_name2>"
            _w ""
            _w "       Sites will be deleted from $SITESDIR."
            _w ""
            return
            ;;
    esac

    SITES_TO_DELETE=("${@}")

    # Below code will never run.
    if [[ ${#SITES_TO_DELETE[@]} == 0 ]] ; then
        _e "Err: Specify one or more sites to delete."
        return 1
    fi

    for site in "${SITES_TO_DELETE[@]}"
    do
        # Deletion will be aborted if any check fails.

        if [[ ! -d "$SITESDIR/$site" ]]
        then
            _e "Err: Site \"$site\" does not exist."
            return 1
        fi

        if [[ ! -f "$SITESDIR/$site/wpstarter.json" ]]
        then
            _e "Err: wpstarter.json could not be found in \"$site\" root."
            _e "\"$site\" is not a wpstarter project."
            return 1
        fi
    done

    if [[ $PROCEED ]]; then
        for site in "${SITES_TO_DELETE[@]}"
        do
            deleteSite "$site"
        done
        return
    fi
    
    _w "${red}Below site[s] will be deleted:${normal}"
    _w ""
    _w "${SITES_TO_DELETE[*]}"
    _w ""
    read -p "Are you sure?  (y/n) (Default No): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        _w "Deletion aborted!"
        return 1
    fi

    for site in "${SITES_TO_DELETE[@]}"
    do
        deleteSite "$site"
    done
    return
}
export -f sub_delete

################
#  sub_create  #
################
function sub_create(){
    subhelp=$1
    case $subhelp in
        "" | "-h" | "--help")
            _w ""
            _w "Usage: ${red}$progname create <site_name> [-n|--no-browse] [-r|--repo /path/to/wpstarter/repo]${normal}"
            _w ""
            _w "       The site will be created in $SITESDIR."
            _w "       Use -r to specify different repo path with which you will base the created site on."
            _w "       If not defined, default wpstarter repository will be" 
            _w "       searched in \"$WPSTARTERDIR\"."
            _w ""
            return
            ;;
    esac

    if [[ -n "$REPO_PATH" ]] && [[ -d "$REPO_PATH" ]] ; then
        WPSTARTERDIR=$REPO_PATH
    fi

    # Check source repo exists.
    if [[ ! -d "$WPSTARTERDIR" ]]; then
        _e "Err: \"$WPSTARTERDIR\" directory does not exist."
        _e "Use \"wpsite clone-repo\" to download it from github."
        return 1
    fi

    # Check if any argument is provided
    # WHY DID I USE QUOTES?
    # wpsite create "dir1 dir2" -> dir1 and dir2 become separate params
    # https://stackoverflow.com/a/51677667
    DOCROOT="$1"

    if [[ -z $DOCROOT ]] ; then
        _e "Err: Specify a directory name. The site will be created in \"$SITESDIR\"."
        return 1
    fi

    # Exit if directory already exists.
    if [[ -d "$SITESDIR/$DOCROOT" ]]
    then
        _e "Err: A site with the same already exists. Specify another one."
        return 1
    fi

    # Exit if directory name contains spaces
    if echo "$DOCROOT" | grep -q -E '[ ]'
    then
        _e "Don't use spaces in directory names."
        return 1
    fi

    # Exit if DB already exists.
    $MYSQLBIN -u $DBUSER -p$DBPASS "$DOCROOT" -e exit > /dev/null 2>&1 && \
    _e "Err: A database with the same name already exists." && \
    return 1
    # We can't rely on below, because it's possible that we don't have the necessary permissions.
    # if [ -d "/var/lib/mysql/$DOCROOT" ] ; then 
    #     	echo "Err: A database with the same name already exists."; exit 1
    # fi

    if [[ ! -d "$SITESDIR" ]]
    then
        mkdir -p "$SITESDIR"
    fi

    # Create the site
    cd "$SITESDIR" || exit
    $GIT clone "$WPSTARTERDIR" "$DOCROOT"
    cd "$DOCROOT" || exit
    $COMPOSERBIN install # Most of the magic happens here thanks to wpstarter.
    cd public || exit
    $VALET link "$DOCROOT" > /dev/null 2>&1
    _w "Site has been created in $SITESDIR/$DOCROOT."

    if [[ $NOBROWSE ]]; then
        return
    else
        openBrowser "$DOCROOT"
    fi

    return
}
export -f sub_create

##############
#  sub_lang  #
##############
function sub_lang(){
    subhelp=$1
    case $subhelp in
        "" | "-h" | "--help")
            _w "Usage: $progname lang <site_name> <language_code>"
            _w ""
            _w "       Install and activate language support for <site_name>."
            _w ""
            _w "       Available languages:"
            _w ""
            _w "       af ar ary as az azb bel bg_BG bn_BD bo bs_BA ca ceb ckb cs_CZ cy da_DK"
            _w "       de_AT de_CH de_CH_informal de_DE de_DE_formal dsb dzo el en_AU en_CA en_GB"
            _w "       en_NZ en_US en_ZA eo es_AR es_CL es_CO es_CR es_EC es_ES es_GT es_MX es_PE"
            _w "       es_PR es_UY es_VE et eu fa_AF fa_IR fi fr_BE fr_CA fr_FR fur gd gl_ES gu"
            _w "       haz he_IL hi_IN hr hsb hu_HU hy id_ID is_IS it_IT ja jv_ID kab ka_GE kk km"
            _w "       kn ko_KR lo lt_LT lv mk_MK ml_IN mn mr ms_MY my_MM nb_NO ne_NP nl_BE nl_NL"
            _w "       nl_NL_formal nn_NO oci pa_IN pl_PL ps pt_AO pt_BR pt_PT pt_PT_ao90 rhg"
            _w "       ro_RO ru_RU sah si_LK skr sk_SK sl_SI snd sq sr_RS sv_SE sw szl tah ta_IN"
            _w "       ta_LK te th tl tr_TR tt_RU ug_CN uk ur uz_UZ vi zh_CN zh_HK zh_TW"
            _w ""
            return
            ;;
    esac

    LANG_ARR=(af ar ary as az azb bel bg_BG bn_BD bo bs_BA ca ceb ckb cs_CZ cy
        da_DK de_AT de_CH de_CH_informal de_DE de_DE_formal dsb dzo el en_AU en_CA
        en_GB en_NZ en_US en_ZA eo es_AR es_CL es_CO es_CR es_EC es_ES es_GT es_MX
        es_PE es_PR es_UY es_VE et eu fa_AF fa_IR "fi" fr_BE fr_CA fr_FR fur gd gl_ES gu
        haz he_IL hi_IN hr hsb hu_HU hy id_ID is_IS it_IT ja jv_ID kab ka_GE kk km kn
        ko_KR lo lt_LT lv mk_MK ml_IN mn mr ms_MY my_MM nb_NO ne_NP nl_BE nl_NL
        nl_NL_formal nn_NO oci pa_IN pl_PL ps pt_AO pt_BR pt_PT pt_PT_ao90 rhg ro_RO
        ru_RU sah si_LK skr sk_SK sl_SI snd sq sr_RS sv_SE sw szl tah ta_IN ta_LK te th
        tl tr_TR tt_RU ug_CN uk ur uz_UZ vi zh_CN zh_HK zh_TW)

    DOCROOT=$1
    WPLANG=$2

    # Exit if directory does not exist.
    if [[ ! -d "$SITESDIR/$DOCROOT" ]]
    then
        _e "Err: Directory does not exist. See \"wpsite lang -h\" for help"
        return 1
    else
        # Check if this is a WP installation.
        if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]
        then
            _e "Err: $DOCROOT is not a WP installation that is installed via wpstarter."
            return 1
        fi
    fi

    if [[ -n $WPLANG ]] ; then
        cd "$SITESDIR/$DOCROOT" || exit
        if [[ ! " ${LANG_ARR[*]} " =~ ${WPLANG} ]]; then
            _e "Err: You entered a wrong language code."
            return 1
        else
            _w "Installing language $WPLANG..."
            wp language core install "$WPLANG" > /dev/null 2>&1
            wp site switch-language "$WPLANG" > /dev/null 2>&1
        fi
    else
        _e "You didn't specify a language code."
        return 1
    fi

    cd "$WORKING_DIR_ORIGINAL"
    _w ""
    _w "Language $WPLANG installed for $DOCROOT."
    return
}
export -f sub_lang

###############
#  sub_quick  #
###############
function sub_quick(){
    subhelp=$1
    case $subhelp in
        "-h" | "--help")
            _w "Usage: $progname quick [-n|--no-browse]"
            _w ""
            _w "       Quickly create a random site by restoring the boilerplate backup."
            _w "       You can create the boilerplate backup using \"wpsite boilerplate\""
            _w "       if it does not exist."
            _w ""
            return
            ;;
    esac

    if [[ $NOBROWSE ]]; then
        wpsite restore boiler $RANDOM -n
    else
        wpsite restore boiler $RANDOM
    fi

    return
}
export -f sub_quick

###############
#  sub_admin  #
###############
function sub_admin(){
    subhelp=$1
    case $subhelp in
        "-h" | "--help")
            _w "Usage: $progname admin <site_name>"
            _w ""
            _w "       Open specified site's dashboard in browser."
            _w "       It will be searched in \"$SITESDIR\"."
            _w ""
            return
            ;;
    esac

    DOCROOT="$1"

    if [[ -z $DOCROOT ]] ; then
        _e "Err: Specify a directory name to open."
        return 1
    fi

    # Exit if directory does not exist.
    if [[ ! -d "$SITESDIR/$DOCROOT" ]]
    then
        _e "Err: Directory does not exist. It was searched in \"$SITESDIR\"."
        return 1
    fi

    # Check if this is a wpstarter project
    if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]
    then
        _e "This may not be a wpstarter project. Aborting..."
        return 1
    fi

    openBrowser "$DOCROOT"
    return
}
export -f sub_admin


##############
#  sub_last  #
##############
function sub_last(){
    subhelp=$1
    case $subhelp in
        "-h" | "--help")
            _w "Usage: $progname last"
            _w ""
            _w "       Open the most recently created site's dashboard in browser."
            _w "       It will be searched in \"$SITESDIR\"."
            _w ""
            return
            ;;
    esac

    # FIXME: Use find -printf thing instead of ls
    SITE=$( find "$SITESDIR"/ \
        -maxdepth 2 \
        -type f \
        -name wpstarter.json \
        | TZ=utc xargs ls -ld --full-time | sort -rk 6 | head -n1 \
        | tr -s ' ' | cut -d" " -f9 | xargs -i dirname {} | xargs -i basename {}
    )

    openBrowser "$SITE"
    return
}
export -f sub_last

############
#  sub_fm  #
############
function sub_fm(){
    subhelp=$1
    case $subhelp in
        "" | "-h" | "--help")
            _w "Usage: $progname fm <site_name>"
            _w ""
            _w "       Open site root directory in file manager."
            _w "       Sites will be searched in \"$SITESDIR\"."
            _w ""
            return
            ;;
    esac

    FM=$(command -v ranger)
    if [ ! $? ]; then
        FM="xdg-open"
    fi

    DOCROOT=$1

    if [[ -d "$SITESDIR/$DOCROOT" ]] ; then
        $FM "$SITESDIR/$DOCROOT/" && return
    else
        _e "Site \"$DOCROOT\" does not exist."
    fi

    return
}
export -f sub_fm

####################
#  sub_clone-repo  #
####################
function sub_clone-repo(){
    subhelp=$1
    case $subhelp in
        "-h" | "--help")
            _w "Usage: $progname clone-repo"
            _w ""
            _w "       Download wpstarter source repository."
            _w "       It will be cloned to \"${purple}$WPSTARTERDIR${normal}\"."
            _w ""
            return
            ;;
    esac

    if [[ ! -d "$WPSTARTERDIR" ]]; then
        $GIT clone https://github.com/tricarte/wpready3 "$HOME/repos/wpready3" && \
        _w ""
        _w "\"${purple}$WPSTARTERREPO${normal}\" has been cloned to \"${purple}$WPSTARTERDIR${normal}\"."
        _w "Now you can use \"wpsite create\" to create a new site."
            else
                _w "\"${purple}$WPSTARTERDIR${normal}\" already exists."
    fi

    return
}
export -f sub_clone-repo

case $subcommand in
    "" | "-h" | "--help" | "help")
        sub_default
        ;;
    *)
        shift
        "sub_${subcommand}" "$@"
        # FIXME: Below will not run with "set -eo" directive.
        if [ $? = 127 ]; then
            _e "Error: '$subcommand' is not a known subcommand." >&2
            _e "Run '$progname --help' for a list of known subcommands." >&2
            _w ""
            exit 1
        fi
        ;;
esac
