#!/usr/bin/env bash
##############################################################################
#  wpsite: Easily create composer and wpstarter based WP test installations  #
##############################################################################

# set -x # Print any command before running
# set -u # Treat unset variables as errors
# You have to use ${VAR:-} everywhere when using set -u
# set -E # You must use this if you want "trap" apply to everything including subshells.
# set -eo pipefail # Exit when a command and any command in a pipe fails

[[ -n ${SUDO_USER:-} ]] && { _e "sudo detected, exiting normally!"; exit; }

if [[ -f "$HOME/.wpsiterc" ]]; then
    source "$HOME/.wpsiterc"
fi

#########################################################
#  DO NOT EDIT these defaults, use ~/.wpsiterc instead  #
#########################################################

# MySQL/MariaDB credentials
if [[ -z $DBUSER ]]; then DBUSER="root"; fi 
if [[ -z $DBPASS ]]; then DBPASS="vagrant"; fi 

# MySQL/MariaDB Host Settings
if [[ -z $DBHOST ]]; then DBHOST="localhost"; fi 
if [[ -z $DBPORT ]]; then DBPORT="3306"; fi 

# Where to host sites 
if [[ -z $SITESDIR ]]; then SITESDIR="$HOME/sites"; fi 

# Where to store/retore backups
if [[ -z $BACKUPSDIR ]]; then BACKUPSDIR="$HOME/backups/sites"; fi 

if [[ -z $WPSTARTERREPO ]]; then WPSTARTERREPO="https://github.com/tricarte/wpready3"; fi 

# Clone of above repo, downloadable with "wpsite clone-repo"
if [[ -z $WPSTARTERDIR ]]; then WPSTARTERDIR="$HOME/repos/wpready3"; fi 

# How many backups to keep while using "wpsite backup your-site --purge"
if [[ -z $NUMBACKUPSTOKEEP ]]; then NUMBACKUPSTOKEEP=2; fi 

#####################
#  End of Defaults  #
#####################


#######################
#  Utility functions  #
#######################

red='\033[0;31m'
green='\033[0;32m'
purple='\033[0;35m'
normal='\033[0m'

# Utility functions
# https://github.com/CodelyTV/dotly/blob/master/installer#L21
_w() {
  local -r text="${1:-}"
  echo -e "$text"
}
_a() { _w " > $1"; }
_e() { _a "${red}$1${normal}"; }
_s() { _a "${green}$1${normal}"; }

##############################
#  End of Utility functions  #
##############################

###################
#  Prerequisites  #
###################

if [[ -n "$XDG_CURRENT_DESKTOP" ]]; then
    if command -v notify-send > /dev/null 2>&1; then
        NOTIFYBIN=$(command -v notify-send)
    fi
fi

# Check MySQL/MariaDB is running
DBSTATUS=$(systemctl status mysql.service | grep Active)
if [[  $DBSTATUS =~ 'inactive' ]]; then
    _e "Database server is not running or reachable."
    if [[ -n "$NOTIFYBIN" ]]; then
        $NOTIFYBIN -a WPSITE "Database server is not running or reachable."
    fi
    exit 1
fi

if command -v wp > /dev/null 2>&1; then
    WP=$(command -v wp)
else
    _e "Err: WPCLI is not installed."
    exit 1
fi

if [[ -n "$XDG_CURRENT_DESKTOP" ]]; then
    if command -v valet > /dev/null 2>&1; then
        VALET=$(command -v valet)
    fi
fi

if command -v git > /dev/null 2>&1; then
    GIT=$(command -v git)
else
    _e "Err: git is not installed."
    exit 1
fi

if command -v composer > /dev/null 2>&1; then
    COMPOSERBIN=$(command -v composer)
else
    _e "Err: Composer cli is not installed."
    exit 1
fi

if command -v mysql > /dev/null 2>&1; then
    MYSQLBIN=$(command -v mysql)
else
    _e "Err: mysql/mardiadb client is not installed."
    exit 1
fi

if [[ ! -w "$SITESDIR" ]]; then
    _e "$SITESDIR is not writable."
    exit 1
fi

if [[ ! -w "$BACKUPSDIR" ]]; then
    _e "$BACKUPSDIR is not writable."
    exit 1
fi
##########################
#  End of prerequisites  #
##########################

WORKING_DIR_ORIGINAL="$(pwd)"

function checkDBCredentials() {
    if [[ $1 == 'wpstarter' ]]; then
        # Check DB credentials in wpstarter repo
        if [[ -d "$WPSTARTERDIR" ]]; then
            eval $(grep DB_USER "$WPSTARTERDIR/custom-templates/.env.example")
            eval $(grep DB_PASSWORD "$WPSTARTERDIR/custom-templates/.env.example")
            if $MYSQLBIN -P$DBPORT -h$DBHOST -u$DB_USER -p$DB_PASSWORD -e"quit" > /dev/null 2>&1; then
                true
                return
            else
                false
                return
            fi
        else
            false
            return
        fi
    else
        if $MYSQLBIN -P$DBPORT -h$DBHOST -u$DBUSER -p$DBPASS -e"quit" > /dev/null 2>&1; then
            true
            return
        else
            false
            return
        fi
    fi

}

function createTmpDir() {
    tmpDir="/tmp/$(basename "$0").$RANDOM.$RANDOM.$RANDOM.$$"
    (umask 077 && mkdir -p "${tmpDir}") || \
        { _e "Could not create temporary directory! Exiting."; exit 1; }
}

# function openBrowser()
# Used by sub_restore(), sub_create(), sub_last()
function openBrowser() {
    if [[ -n "$NOTIFYBIN" ]]; then
        $NOTIFYBIN -a WPSITE "Opening $1 in browser..."
    fi

    if [[ -n "$XDG_CURRENT_DESKTOP" ]]; then
        $WP admin --skip-plugins --path="$SITESDIR/$1/public/cms" > /dev/null 2>&1
    fi
    return
}

function deleteSite() {
    DB_USER=$DBUSER
    DB_PASSWORD=$DBPASS

    $MYSQLBIN -P$DBPORT -h$DBHOST -u$DB_USER -p$DB_PASSWORD -e "DROP DATABASE IF EXISTS \`$1\`"

    # Drop additional users created with 'wpsite crete site_name --production'
    DELETE_USER=$($MYSQLBIN -P$DBPORT -h$DBHOST -Nsr -u$DB_USER -p$DB_PASSWORD -e "SELECT user from mysql.user where user like '$1%'")
    if [[ -n $DELETE_USER ]]; then
        $MYSQLBIN -P$DBPORT -h$DBHOST -u$DB_USER -p$DB_PASSWORD -e "DROP USER '$DELETE_USER'@'localhost';"
        $MYSQLBIN -P$DBPORT -h$DBHOST -u$DB_USER -p$DB_PASSWORD -e "FLUSH PRIVILEGES;"
    fi
    
    rm -rf "${SITESDIR:?}/${1:?}"
    if which "$VALET" >/dev/null 2>&1; then
        $VALET unlink "$DOCROOT" > /dev/null 2>&1
    fi

    _w "Site ${red}\"$1\"${normal} has been deleted."

    if [[ -n "$NOTIFYBIN" ]]; then
        $NOTIFYBIN -a WPSITE "Site \"$1\" has been deleted."
    fi
    return
}

function findLastSite() {
    # FIXME: Use find -printf thing instead of ls
    SITE=$( find "$SITESDIR"/ \
        -maxdepth 2 \
        -type f \
        -name wpstarter.json \
        | TZ=utc xargs ls -ld --full-time | sort -rk 6 | head -n1 \
        | tr -s ' ' | cut -d" " -f9 | xargs -i dirname {} | xargs -i basename {}
    )

    echo $SITE
}

###########################
#  Global Option Parsing  #
###########################
# https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f
PARAMS=""
while (( "$#" )); do
case "$1" in
    -y|--yes)
        PROCEED=1
        shift # Pop the first element off the array on each iteration.
        ;;
    -p|--purge)
        PURGE=1
        shift
        ;;
    -n|--no-browse)
        NOBROWSE=1
        shift
        ;;
    --production)
        PRODUCTION=1
        shift
        ;;
    --bare)
        BARE=1
        shift
        ;;
    -r|--repo)
        if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
            REPO_PATH=$2
            shift 2
        else
            _e "Error: Argument for $1 is missing" >&2
            exit 1
        fi
        ;;
    --with-plugin)
        if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
            INSTALL_PLUGIN=$2
            shift 2
        else
            _e "Error: Argument for $1 is missing" >&2
            exit 1
        fi
        ;;
    --with-theme)
        if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
            INSTALL_THEME=$2
            shift 2
        else
            _e "Error: Argument for $1 is missing" >&2
            exit 1
        fi
        ;;
    -h|--help)
        SUBHELP=1
        shift
        ;;
    --*|-*) # unsupported flags
        _e "Error: Unsupported flag $1" >&2
        exit 1
        ;;
    *) # preserve positional arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

progname=$(basename "$0")
subcommand=$1

#################
#  SUBCOMMANDS  #
#################

#################
#  sub_default  #
#################
function sub_default(){
    _w ""
    _w "Usage: ${purple}$progname <subcommand> [dir1] [dir2] OPTIONS${normal}"
    _w ""
    _w "Subcommands:"
    _w "    ${purple}create${normal}          Create a new WP site."
    _w "    ${purple}backup${normal}          Backup an existing WP site."
    _w "    ${purple}delete${normal}          Delete an existing WP site."
    _w "    ${purple}restore${normal}         Restore an existing WP site from backup."
    _w "    ${purple}rename${normal}          Rename an existing site."
    _w "    ${purple}list${normal}            List all wpstarter-enabled sites in \"$SITESDIR\"."
    _w "    ${purple}last${normal}            Open the most recently created site's admin dashboard."
    _w "    ${purple}lang${normal}            Install a new language into an existing wpstarter installation."
    _w "    ${purple}quick${normal}           Quickly create a new WP test site without asking too much."
    _w "    ${purple}update${normal}          Apply \"composer update\" to the wpstarter repository."
    _w "    ${purple}admin${normal}           Open site's admin dashboard in browser."
    _w "    ${purple}boilerplate${normal}     Create boilerplate template backup for use with \"wpsite quick\" in \"$BACKUPSDIR\"."
    _w "    ${purple}clone-repo${normal}      Download wpstarter source repo from github."
    _w "    ${purple}fm${normal}              Open site root directory in file manager."
    _w "    ${purple}install-plugin${normal}  Install a plugin to a site and activate it."
    _w "    ${purple}install-theme${normal}   Install a theme to a site and activate it."
    _w "    ${purple}woo${normal}             Do a quick WooCommerce installation with StoreFront theme."
    _w "    ${purple}settings${normal}        Interactively change necessary WP settings that are set generically at the site installation."
    _w "    ${purple}flush-env${normal}       Delete and rebuild .env.cached.php file of a site."
    _w "    ${purple}config${normal}          Create .wpsiterc config file in $HOME."
    _w "    ${purple}testdb${normal}          Make a connection to DB to test user credentials stored in \"~/.wpsiterc\"."
    _w ""
    _w "For help with each subcommand run:"
    _w "${purple}$progname <subcommand> -h|--help${normal}"
    _w ""
    exit
}
export -f sub_default

##############
#  sub_list  #
##############
function sub_list(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname list"
        _w ""
        _w "       List all wpstarter-enabled sites in $SITESDIR."
        _w ""
        return
    fi

    if command -v fd > /dev/null 2>&1; then
        FD=$(command -v fd)
        sitesList=$($FD wpstarter.json --max-depth 2 --type f --base-directory "$SITESDIR" --color never --exec dirname)
    else
        sitesList=$(find "$SITESDIR/" -maxdepth 2 -type f -name wpstarter.json -exec dirname {} \; | xargs -i basename {} -0)
    fi

    if [[ -n $sitesList ]]; then
        echo "$sitesList"
    else
        _w "There are no wpstarter based WordPress installations in $SITESDIR."
    fi

    return
}
export -f sub_list

#####################
#  sub_boilerplate  #
#####################
function sub_boilerplate(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname boilerplate"
        _w ""
        _w "       Create a boilerplate template backup for use with \"wpsite quick\" in \"$BACKUPSDIR\"."
        _w ""
        return
    fi

    if [[ -d "$SITESDIR/boiler" ]]; then
        $progname delete boiler
    fi
    _w "Temporary site ${purple}\"boiler\"${normal} is being created..."
    $progname create boiler -n
    # wpsite create boiler -n > /dev/null 2>&1 && \
    _w "Backing up ${purple}\"boiler\"${normal} for later use..."
    $progname backup boiler
    # wpsite backup boiler > /dev/null 2>&1 && \
    _w "Removing temporary site..."
    $progname delete boiler -y
    # wpsite delete boiler  -y > /dev/null 2>&1

    # Delete everything but the last backup.
    _w "Removing older versions of the boilerplate from ${purple}\"$BACKUPSDIR/boiler\"${normal}..."
    cd "$BACKUPSDIR/boiler" || exit
    mapfile -t BACKUPSLIST < <(find -- * -maxdepth 0 -type d -printf "%f\n" -regextype 'posix-extended' -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$")
    for (( i = 0; i < ( ${#BACKUPSLIST[@]} - 1 ); i++ )); do
        rm -rf "${BACKUPSLIST[i]}"
    done
    _w "DONE."

    _w ""
    _w "Boilerplate template created in ${red}\"$BACKUPSDIR\"${normal}."
    _w "Now you can use ${purple}\"wpsite quick\"${normal}"
    _w "to create sites based on that template."

    return
}
export -f sub_boilerplate

################
#  sub_update  #
################
function sub_update(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname update"
        _w ""
        _w "       Update composer packages in wpstarter source repository."
        _w ""
        return
    fi

    start=$SECONDS

    # Check source repo exists.
    if [[ ! -d "$WPSTARTERDIR" ]]; then
        _e "Err: wpstarter repository does not exist."
        _e "It was searched in $WPSTARTERDIR".
        return 1
    fi

    if [[ ! $PROCEED ]]; then
        read -p "Composer packages in wpstarter repository will be updated! Proceed?  (y/n) (Default No): " -r
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            _w "Update aborted."
            return 1
        fi
    fi

    createTmpDir

    cp "$WPSTARTERDIR/composer.lock" "$tmpDir/composer.lock"
    # result=$(diff -sq "$WPSTARTERDIR/composer.lock" /tmp/composer.lock )

    _w "Updating composer packages..."
    $COMPOSERBIN --working-dir="$WPSTARTERDIR" update -q

    if grep -q "identical" <<< "$(diff -sq "$WPSTARTERDIR/composer.lock" "$tmpDir/composer.lock")"; then
        _w "No updates are available."
        return
    else
        end=$SECONDS
        _w "Composer update took $((end-start)) seconds to finish."
        $GIT --git-dir="$WPSTARTERDIR/.git" --work-tree="$WPSTARTERDIR" add composer.lock
        $GIT --git-dir="$WPSTARTERDIR/.git" --work-tree="$WPSTARTERDIR" commit -m"versions updated"
        _w "$WPSTARTERDIR updated."
        _w ""
        _w "Now creating a boilerplate site based on the updated repository"
        _w "to be later used with ${purple}\"wpsite quick\"${normal}."
        _w ""
        $progname boilerplate
    fi

    return
}
export -f sub_update

#################
#  sub_restore  #
#################
function sub_restore(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname restore <site_name> [new_site_name] [-n|--no-browse]"
        _w ""
        _w "       The backup named <site_name> inside $BACKUPSDIR"
        _w "       will be restored either to the same name"
        _w "       or to [new_site_name] inside $SITESDIR."
        _w ""
        return
    fi

    DOCROOT=$1
    NEWDOCROOT=$2

    FINALDIR=""

    if [[ -z $DOCROOT ]]; then
        _e "Err: Specify a directory to restore. It will be searched in $BACKUPSDIR."
        return 1
    fi

    if [[ -n $NEWDOCROOT ]]; then
        if [[ -d "$SITESDIR/$NEWDOCROOT" ]]; then
            _e "Err: A site with the name \"$NEWDOCROOT\" is already available."
            return 1
        fi
    fi

    # Exit if a site with the same name already exists
    if [[ -d "$SITESDIR/$DOCROOT" ]] && [[ -z $NEWDOCROOT ]]; then
        _e "Err: A site with the name \"$DOCROOT\" is already available."
        return 1
    fi

    # Exit if backup directory does not exist.
    if [[ ! -d "$BACKUPSDIR/$DOCROOT" ]]; then
        _e "Err: Backup directory 'boiler' does not exist in $BACKUPSDIR."
        _w "You can create one with \"wpsite boilerplate\"."
        return 1
    fi

    # Find the latest backup directory
    # LATEST_BACKUP=$( ls -t "$BACKUPSDIR/$DOCROOT" -1 | head -n1 )
    LATEST_BACKUP=$(find "$BACKUPSDIR"/"$DOCROOT"/* \
        -maxdepth 0 \
        -type d -printf '%f\n' \
        -regextype 'posix-extended' \
        -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$" | sort -nr | head -n1)

    # Exit if backups don't exist.
    if [[ ! -f "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/files.tar.gz" ]]; then
        _e "Err: files.tar.gz does not exist."
        return 1
    fi

    # Exit if backups don't exist.
    if [[ ! -f "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/database.sql.gz" ]]; then
        _e "Err: database.sql.gz does not exist."
        return 1
    fi

    if ! checkDBCredentials; then
        _e "Cannot connect to database using specified credentials."
        _e "Run $progname testdb for help."
        return 1
    fi

    createTmpDir

    if [[ -n $NEWDOCROOT ]]; then
            $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS "$NEWDOCROOT" -e exit > /dev/null 2>&1 && \
                _e "Err: A database with the same new name already exists." && \
                return 1
            $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS -e"CREATE DATABASE \`$NEWDOCROOT\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" && \
                _w "Creating the database $NEWDOCROOT... DONE."
            gunzip < "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/database.sql.gz" | $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS "$NEWDOCROOT" && \
                _w "Importing the database backup... DONE."
            tar zxf "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/files.tar.gz" --checkpoint=.1000 -C "$tmpDir" && \
                _w "" && _w "Extracting files from backup... DONE."

            # Check if this is a wpstarter project
            if [[ ! -f "$tmpDir/$DOCROOT/wpstarter.json" ]]; then
                _e "Err: wpstarter.json could not be found in the backup."
                _e "This may not be a wpstarter project. Aborting..."
                rm -rf "$tmpDir/${DOCROOT:?}"
                $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS -e "DROP DATABASE IF EXISTS $NEWDOCROOT"
                _w "Changes reverted. No backup is restored."
                return 1
            fi

            mv "$tmpDir/$DOCROOT" "$SITESDIR/$NEWDOCROOT"
            replace -s "$DOCROOT" "$NEWDOCROOT" -- "$SITESDIR/$NEWDOCROOT/.env"
            rm -f "$SITESDIR/$NEWDOCROOT/.env.cached.php"
            $WP --skip-plugins --path="$SITESDIR/$NEWDOCROOT/public" search-replace "$DOCROOT" "$NEWDOCROOT" > /dev/null 2>&1
            _w "Performing search-replace in WordPress DB... DONE."
            $WP --skip-plugins --skip-mail --path="$SITESDIR/$NEWDOCROOT/public" user update usr"$NEWDOCROOT" --user_pass=pss"$NEWDOCROOT" > /dev/null 2>&1
            _w "Updating the admin user... DONE."
            rm -f "$SITESDIR/$NEWDOCROOT/public/content/db.php"
            $WP --skip-plugins --path="$SITESDIR/$NEWDOCROOT/public" plugin deactivate query-monitor > /dev/null 2>&1
            $WP --skip-plugins --path="$SITESDIR/$NEWDOCROOT/public" plugin activate query-monitor > /dev/null 2>&1

            FINALDIR=$NEWDOCROOT
        else
            $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS "$DOCROOT" -e exit > /dev/null 2>&1 && \
                _e "Err: A database with the same name already exists." && \
                return 1
            $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS -e"CREATE DATABASE \`$DOCROOT\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" && \
                _w "Creating the dabase $DOCROOT... DONE."
            gunzip < "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/database.sql.gz" | $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS "$DOCROOT" && \
                _w "Importing the database backup... DONE."
            tar zxf "$BACKUPSDIR/$DOCROOT/$LATEST_BACKUP/files.tar.gz" --checkpoint=.1000 -C "$SITESDIR" && \
                _w "" && _w "Extracting files from backup... DONE."
            
            # Check if this is a wpstarter project
            if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]; then
                _e "Err: wpstarter.json could not be found in the backup."
                _e "This may not be a wpstarter project. Aborting..."
                rm -rf "${SITESDIR:?}/${DOCROOT:?}"
                $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS -e "DROP DATABASE IF EXISTS $DOCROOT"
                _w "Changes reverted. No backup is restored."
                return 1
            fi

            FINALDIR=$DOCROOT
    fi

    # To determine the most recently created site for "wpsite last"
    touch "$SITESDIR/$FINALDIR/wpstarter.json"

    # Link valet
    if which "$VALET" >/dev/null 2>&1; then
        ( cd "$SITESDIR/$FINALDIR/public" && $VALET link "$FINALDIR" > /dev/null 2>&1)
    fi
    _w "$FINALDIR has been restored."

    if [[ $NOBROWSE ]]; then
        return
    else
        openBrowser "$FINALDIR"
    fi

    return
}
export -f sub_restore

################
#  sub_rename  #
################
function sub_rename(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname rename <site_name> <new_site_name>"
        _w ""
        return
    fi

    DOCROOT=$1
    NEWDOCROOT=$2

    if [[ $DOCROOT == "last" ]]; then
        DOCROOT="$(findLastSite)"
    fi

    # If number of arguments is 1 and current directory is a
    # wpstarter installation, then use as $DOCROOT
    if [[ $# == 1 ]]; then
        if [[ -f "$WORKING_DIR_ORIGINAL/wpstarter.json" ]]; then
            DOCROOT=$(basename $WORKING_DIR_ORIGINAL)
            NEWDOCROOT=$1
        fi
    elif [[ -z $DOCROOT ]]; then
        _e "Err: Specify an existing site to rename. It will be searched in $SITESDIR."
        _e "See \"$progname rename -h\" for help."
        return 1
    fi

    if [[ -z $DOCROOT ]]; then
        _e "Err: Specify an existing site to rename. It will be searched in $SITESDIR."
        return 1
    elif [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: A site with the name \"$DOCROOT\" does not exist."
        return 1
    fi

    # "last" is a reserved keyword.
    if [[ $NEWDOCROOT == "last" ]]; then
        NEWDOCROOT="last_site"
    fi

    if [[ -n $NEWDOCROOT ]]; then
        if [[ -d "$SITESDIR/$NEWDOCROOT" ]]; then
            _e "Err: A site with the name \"$NEWDOCROOT\" already exists."
            return 1
        fi
    else 
        _e "Err: You didn't specify a new name for the site."
        return 1
    fi

    if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]; then
        _e "Err: wpstarter.json could not be found in $DOCROOT."
        _e "This may not be a wpstarter project. Aborting..."
        return 1
    fi

    _w "Renaming $DOCROOT to $NEWDOCROOT."
    _w "This will take some time..."
    _w ""

    $progname backup "$DOCROOT" > /dev/null 2>&1
    $progname restore "$DOCROOT" "$NEWDOCROOT" -n > /dev/null 2>&1
    $progname delete "$DOCROOT" -y > /dev/null 2>&1

    # Delete the created backup for this process
    LATEST_BACKUP=$(find "$BACKUPSDIR"/"$DOCROOT"/* \
        -maxdepth 0 \
        -type d -printf '%f\n' \
        -regextype 'posix-extended' \
        -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$" | sort -nr | head -n1)

    rm -rf "${BACKUPSDIR:?}/$DOCROOT/$LATEST_BACKUP"
    find "$BACKUPSDIR" -empty -type d -delete

    _w "DONE."

    return
}
export -f sub_rename

################
#  sub_backup  #
################
function sub_backup(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname backup <site_name> [-p|--purge]"
        _w ""
        _w "       The directory <site_name> in $SITESDIR"
        _w "       will be backed up to $BACKUPSDIR."
        _w "       To delete older backups of <site_name> use --purge option."
        _w ""
        return
    fi

    # Check if any argument is provided
    DOCROOT=$1

    if [[ $DOCROOT == "last" ]]; then
        DOCROOT="$(findLastSite)"
    fi

    # If number of arguments is 0 and current directory is
    # a wpstarter installation, then use as $DOCROOT
    if [[ $# == 0 ]]; then
        if [[ -f "$WORKING_DIR_ORIGINAL/wpstarter.json" ]]; then
            DOCROOT=$(basename $WORKING_DIR_ORIGINAL)
        fi
    fi

    if [[ -z $DOCROOT ]]; then
        _e "Err: Specify a site to backup."
        _e "See \"$progname backup -h\" for help."
        return 1
    fi

    # Exit if directory does not exist.
    if [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: Directory does not exist. See \"wpsite backup -h\" for help."
        return 1
    else
        # Check if this is a wpstarter installation.
        if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]; then
            _e "Err: $DOCROOT is not a WP installation that is installed via wpstarter."
            return 1
        fi
    fi

    if [[ $PURGE ]]; then
        # Delete older backups if there are more than $NUMBACKUPSTOKEEP.
        cd "$BACKUPSDIR/$DOCROOT" || exit
        mapfile -t BACKUPSLIST < <(find -- * -maxdepth 0 -type d -printf "%f\n" -regextype 'posix-extended' -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$")
        # mapfile -t BACKUPSLIST < <(find -- * -maxdepth 0 -type d ! -newer $TSTAMP)
        # BACKUPSLIST=( $(find "$BACKUPSDIR/$DOCROOT" -maxdepth 0 -type d -printf "%f\n" -regextype 'posix-extended' -regex "^[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$") )
        # ! -newer $TSTAMP ! -name $TSTAMP

        if [[ ${#BACKUPSLIST[@]} -gt $NUMBACKUPSTOKEEP ]]; then
            read -p "Older backups will be deleted! Proceed?  (y/n) (Default No): " -r
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                _w "Removal of older backups aborted."
            else
                _w ""
                _w "Removing older backups..."
                for (( i = 0; i < ( ${#BACKUPSLIST[@]} - NUMBACKUPSTOKEEP ); i++ )); do
                    rm -rfv "${BACKUPSLIST[i]}"
                done
            fi
        else
            _w "You don't have more than $NUMBACKUPSTOKEEP backup[s] to purge."
            return 0
        fi
        return
    fi

    # Create backups directory.
    TSTAMP=$(date +%Y-%m-%d-%H%M%S)
    mkdir -p "$BACKUPSDIR/$DOCROOT/$TSTAMP"

    _w "Exporting database..."
    $WP --skip-plugins db export \
        --path="$SITESDIR/$DOCROOT/public/cms" \
        - | gzip > "$BACKUPSDIR/$DOCROOT/$TSTAMP/database.sql.gz" && \
        _w "Exporting database DONE"

    _w "Exporting site files..."
    tar czf \
        "$BACKUPSDIR/$DOCROOT/$TSTAMP/files.tar.gz"  \
        --checkpoint=.1000 \
        --exclude=*.tar.gz --directory="$SITESDIR" "$DOCROOT" && \
        _w ""
        _w "Exporting site files DONE."

    _w ""
    _w "Backup created in: $BACKUPSDIR/$DOCROOT/$TSTAMP"
    return
}
export -f sub_backup

################
#  sub_delete  #
################
function sub_delete(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname delete <site_name1> <site_name2>"
        _w ""
        _w "       Sites will be deleted from $SITESDIR."
        _w ""
        return
    fi

    SITES_TO_DELETE=("${@}")

    if [[ ${#SITES_TO_DELETE[@]} == 0 ]]; then
        _e "Err: Specify one or more sites to delete."
        _w "See \"$progname delete --help\" for help."
        return 1
    fi

    # If "last" provided as the site name to be deleted
    if [[ ${SITES_TO_DELETE[*]} =~ "last" ]]; then
        LAST_SITE="$(findLastSite)"

        if [[ -d "$SITESDIR/$LAST_SITE" ]] ; then
            if [[ $PROCEED ]]; then
                $progname delete "$LAST_SITE" -y
            else
                $progname delete "$LAST_SITE"
            fi
        fi

        return
    fi

    for site in "${SITES_TO_DELETE[@]}"
    do
        # Deletion will be aborted if any check fails.

        if [[ ! -d "$SITESDIR/$site" ]]; then
            _e "Err: Site \"$site\" does not exist."
            return 1
        fi

        if [[ ! -f "$SITESDIR/$site/wpstarter.json" ]]; then
            _e "Err: wpstarter.json could not be found in \"$site\" root."
            _e "\"$site\" is not a wpstarter project."
            return 1
        fi
    done

    if ! checkDBCredentials; then
        _e "Cannot connect to database using specified credentials."
        _e "Run $progname testdb for help."
        exit 1
    fi

    if [[ $PROCEED ]]; then
        for site in "${SITES_TO_DELETE[@]}"
        do
            deleteSite "$site"
        done
        return
    fi
    
    _w "${red}Below site[s] will be deleted:${normal}"
    _w ""
    _w "${SITES_TO_DELETE[*]}"
    _w ""
    read -p "Are you sure?  (y/n) (Default No): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        _w "Deletion aborted!"
        return 1
    fi

    for site in "${SITES_TO_DELETE[@]}"
    do
        deleteSite "$site"
    done

    return
}
export -f sub_delete

################
#  sub_create  #
################
function sub_create(){
    if [[ $SUBHELP ]]; then
        _w ""
        _w "Usage: ${red}$progname create <site_name> [-n|--no-browse] --bare --production [-r|--repo /path/to/wpstarter/repo]${normal}"
        _w ""
        _w "       The site will be created in $SITESDIR."
        _w "       Use -r to specify different wpstarter repo path"
        _w "       with which you will base the created site on."
        _w ""
        _w "       Use --production to disable some development related plugins and options."
        _w ""
        _w "       Use --bare to not apply any further customizations to the installation."
        _w "       Plugins will still be installed but not activated."
        _w ""
        _w "       If not defined, default wpstarter repository will be" 
        _w "       searched in \"$WPSTARTERDIR\"."
        _w ""
        return
    fi

    if [[ -n "$REPO_PATH" ]] && [[ -d "$REPO_PATH" ]]; then
        WPSTARTERDIR=$REPO_PATH
    fi

    # Check source repo exists.
    if [[ ! -d "$WPSTARTERDIR" ]]; then
        _e "Err: \"$WPSTARTERDIR\" directory does not exist."
        _e "Use \"wpsite clone-repo\" to download it from github."
        return 1
    fi

    # Check if any argument is provided
    # WHY DID I USE QUOTES?
    # wpsite create "dir1 dir2" -> dir1 and dir2 become separate params
    # https://stackoverflow.com/a/51677667
    DOCROOT="$1"

    # "last" keyword is reserved
    if [[ $DOCROOT == "last" ]]; then
        DOCROOT="last_site"
    fi

    if [[ -z $DOCROOT ]]; then
        _e "Err: Specify a directory name."
        _e "The site will be created in \"$SITESDIR\"."
        _e "See \"$progname create -h\" for help."
        return 1
    fi

    if ! checkDBCredentials; then
        _e "Cannot connect to database using specified credentials."
        _e "Run $progname testdb for help."
        exit 1
    fi

    # Exit if directory already exists.
    if [[ -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: A site with the same already exists. Specify another one."
        return 1
    fi

    # Exit if directory name contains spaces
    if echo "$DOCROOT" | grep -q -E '[ ]'; then
        _e "Don't use spaces in directory names."
        return 1
    fi

    # Exit if DB already exists.
    $MYSQLBIN -P$DBPORT -h$DBHOST -u $DBUSER -p$DBPASS "$DOCROOT" -e exit > /dev/null 2>&1 && \
    _e "Err: A database with the same name already exists." && \
    return 1
    # We can't rely on below, because it's possible that we don't have the necessary permissions.
    # if [ -d "/var/lib/mysql/$DOCROOT" ]; then 
    #     	echo "Err: A database with the same name already exists."; exit 1
    # fi

    # Check DB credentials in wpstarter repo
    eval $(grep DB_USER "$WPSTARTERDIR/custom-templates/.env.example")
    eval $(grep DB_PASSWORD "$WPSTARTERDIR/custom-templates/.env.example")
    if ! $MYSQLBIN -P$DBPORT -h$DBHOST -u$DB_USER -p$DB_PASSWORD -e"quit" > /dev/null 2>&1; then
        _e "Err: Cannot connect to DB."
        _w "DB Credentials in $WPSTARTERDIR/custom-template/.env.example"        
        _w "is not correct."
        _e "Installation aborted."
        exit 1
    fi

    if [[ ! -d "$SITESDIR" ]]; then
        mkdir -p "$SITESDIR"
    fi

    if [[ -n "$NOTIFYBIN" ]]; then
        $NOTIFYBIN -a WPSITE "$DOCROOT is being created..."
    fi

    # Create the site
    $GIT clone "$WPSTARTERDIR" "$SITESDIR/$DOCROOT"
    # Add post-merge hook to apply "composer wpstarter" after git pull
    echo "#!/usr/bin/env bash
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
composer wpstarter" > "$SITESDIR/$DOCROOT/.git/hooks/post-merge"
    chmod +x "$SITESDIR/$DOCROOT/.git/hooks/post-merge"

    $COMPOSERBIN --working-dir="$SITESDIR/$DOCROOT" install
    $progname install "$DOCROOT" # Most of the installation magic happens here

    if which "$VALET" >/dev/null 2>&1; then
        ( cd "$SITESDIR/$DOCROOT/public" && $VALET link "$DOCROOT" > /dev/null 2>&1)
    fi

    _w "Site has been created in $SITESDIR/$DOCROOT."

    if [[ -n "$NOTIFYBIN" ]]; then
        $NOTIFYBIN -a WPSITE "$DOCROOT is created."
    fi

    if [[ $NOBROWSE ]]; then
        return
    else
        openBrowser "$DOCROOT"
    fi

    return
}
export -f sub_create

##############
#  sub_lang  #
##############
function sub_lang(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname lang <site_name> <language_code>"
        _w ""
        _w "       Install and activate language support for <site_name>."
        _w ""
        _w "       Available languages:"
        _w ""
        _w "       af ar ary as az azb bel bg_BG bn_BD bo bs_BA ca ceb ckb cs_CZ cy da_DK"
        _w "       de_AT de_CH de_CH_informal de_DE de_DE_formal dsb dzo el en_AU en_CA en_GB"
        _w "       en_NZ en_US en_ZA eo es_AR es_CL es_CO es_CR es_EC es_ES es_GT es_MX es_PE"
        _w "       es_PR es_UY es_VE et eu fa_AF fa_IR fi fr_BE fr_CA fr_FR fur gd gl_ES gu"
        _w "       haz he_IL hi_IN hr hsb hu_HU hy id_ID is_IS it_IT ja jv_ID kab ka_GE kk km"
        _w "       kn ko_KR lo lt_LT lv mk_MK ml_IN mn mr ms_MY my_MM nb_NO ne_NP nl_BE nl_NL"
        _w "       nl_NL_formal nn_NO oci pa_IN pl_PL ps pt_AO pt_BR pt_PT pt_PT_ao90 rhg"
        _w "       ro_RO ru_RU sah si_LK skr sk_SK sl_SI snd sq sr_RS sv_SE sw szl tah ta_IN"
        _w "       ta_LK te th tl tr_TR tt_RU ug_CN uk ur uz_UZ vi zh_CN zh_HK zh_TW"
        _w ""
        return
    fi

    LANG_ARR=(af ar ary as az azb bel bg_BG bn_BD bo bs_BA ca ceb ckb cs_CZ cy
        da_DK de_AT de_CH de_CH_informal de_DE de_DE_formal dsb dzo el en_AU en_CA
        en_GB en_NZ en_US en_ZA eo es_AR es_CL es_CO es_CR es_EC es_ES es_GT es_MX
        es_PE es_PR es_UY es_VE et eu fa_AF fa_IR "fi" fr_BE fr_CA fr_FR fur gd gl_ES gu
        haz he_IL hi_IN hr hsb hu_HU hy id_ID is_IS it_IT ja jv_ID kab ka_GE kk km kn
        ko_KR lo lt_LT lv mk_MK ml_IN mn mr ms_MY my_MM nb_NO ne_NP nl_BE nl_NL
        nl_NL_formal nn_NO oci pa_IN pl_PL ps pt_AO pt_BR pt_PT pt_PT_ao90 rhg ro_RO
        ru_RU sah si_LK skr sk_SK sl_SI snd sq sr_RS sv_SE sw szl tah ta_IN ta_LK te th
        tl tr_TR tt_RU ug_CN uk ur uz_UZ vi zh_CN zh_HK zh_TW)

    DOCROOT=$1
    WPLANG=$2

    if [[ $DOCROOT == "last" ]]; then
        DOCROOT="$(findLastSite)"
    fi

    # If number of arguments is 1 and current directory is a
    # wpstarter installation, then use as $DOCROOT
    if [[ $# == 1 ]]; then
        if [[ -f "$WORKING_DIR_ORIGINAL/wpstarter.json" ]]; then
            DOCROOT=$(basename $WORKING_DIR_ORIGINAL)
            WPLANG=$1
        fi
    elif [[ -z $DOCROOT ]]; then
        _e "Err: Specify a site to install the language."
        _e "See \"$progname lang -h\" for help."
        return 1
    fi

    # Exit if directory does not exist.
    if [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: Directory does not exist. See \"wpsite lang -h\" for help"
        return 1
    else
        # Check if this is a WP installation.
        if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]; then
            _e "Err: $DOCROOT is not a WP installation that is installed via wpstarter."
            return 1
        fi
    fi

    if [[ -n $WPLANG ]]; then
        if [[ ! " ${LANG_ARR[*]} " =~ ${WPLANG} ]]; then
            _e "Err: You entered a wrong language code."
            return 1
        else
            _w "Installing language $WPLANG..."
            $WP --skip-plugins --path="$SITESDIR/$DOCROOT/public/cms" language core install "$WPLANG" > /dev/null 2>&1
            $WP --skip-plugins --path="$SITESDIR/$DOCROOT/public/cms" site switch-language "$WPLANG" > /dev/null 2>&1
        fi
    else
        _e "You didn't specify a language code."
        return 1
    fi

    _w ""
    _w "Language $WPLANG installed for $DOCROOT."
    return
}
export -f sub_lang

###############
#  sub_quick  #
###############
function sub_quick(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname quick [-n|--no-browse]"
        _w ""
        _w "       Quickly create a random site by restoring the boilerplate backup."
        _w "       You can create the boilerplate backup using \"wpsite boilerplate\""
        _w "       if it does not exist."
        _w ""
        return
    fi

    SITENAME=$RANDOM
    if [[ -n "$NOTIFYBIN" ]]; then
        $NOTIFYBIN -a WPSITE "Site $SITENAME is being created." "Please wait..."
    fi
    $progname restore boiler $SITENAME -n

    if [[ -n "$INSTALL_PLUGIN" ]]; then
        $progname install-plugin "$SITENAME" "$INSTALL_PLUGIN"
    fi

    if [[ -n "$INSTALL_THEME" ]]; then
        $progname install-theme "$SITENAME" "$INSTALL_THEME"
    fi

    if [[ ! $NOBROWSE ]]; then
        $progname admin "$SITENAME"
        return
    fi

    if [[ -n "$NOTIFYBIN" ]]; then
        $NOTIFYBIN -a WPSITE "Site $SITENAME created." "Use \"$progname last\" to open the dashboard."
    fi

    return
}
export -f sub_quick

###############
#  sub_admin  #
###############
function sub_admin(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname admin <site_name>"
        _w ""
        _w "       Open specified site's dashboard in browser."
        _w "       It will be searched in \"$SITESDIR\"."
        _w ""
        return
    fi

    DOCROOT="$1"

    if [[ $DOCROOT == "last" ]]; then
        DOCROOT="$(findLastSite)"
    fi

    # If number of arguments is 0 and current directory is a
    # wpstarter installation, then use as $DOCROOT
    if [[ $# == 0 ]]; then
        if [[ -f "$WORKING_DIR_ORIGINAL/wpstarter.json" ]]; then
            DOCROOT=$(basename $WORKING_DIR_ORIGINAL)
        fi
    elif [[ -z $DOCROOT ]]; then
        _e "Err: Specify a directory name to open."
        _e "See $progname admin -h for help."
        return 1
    fi

    # Exit if directory does not exist.
    if [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: Directory does not exist. It was searched in \"$SITESDIR\"."
        return 1
    fi

    # Check if this is a wpstarter project
    if [[ ! -f "$SITESDIR/$DOCROOT/wpstarter.json" ]]; then
        _e "This may not be a wpstarter project. Aborting..."
        return 1
    fi

    openBrowser "$DOCROOT"
    return
}
export -f sub_admin


##############
#  sub_last  #
##############
function sub_last(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname last"
        _w ""
        _w "       Open the most recently created site's dashboard in browser."
        _w "       It will be searched in \"$SITESDIR\"."
        _w ""
        return
    fi

    lastSite="$(findLastSite)"

    if [[ -n $lastSite ]]; then
        openBrowser "$lastSite"
    else
        _w "There are no wpstarter based WordPress installations in $SITESDIR."
    fi

    return
}
export -f sub_last

############
#  sub_fm  #
############
function sub_fm(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname fm <site_name>"
        _w ""
        _w "       Open site root directory in file manager."
        _w "       Sites will be searched in \"$SITESDIR\"."
        _w ""
        return
    fi

    FM=$(command -v ranger)
    if [ ! $? ]; then
        FM="xdg-open"
    fi

    DOCROOT=$1

    if [[ $DOCROOT == "last" ]]; then
        DOCROOT="$(findLastSite)"
    fi

    # If number of arguments is 0 and current directory is a
    # wpstarter installation, then use as $DOCROOT
    if [[ $# == 0 ]]; then
        if [[ -f "$WORKING_DIR_ORIGINAL/wpstarter.json" ]]; then
            DOCROOT=$(basename $WORKING_DIR_ORIGINAL)
        fi
    elif [[ -z $DOCROOT ]]; then
        _e "Err: Specify a directory name to browse with the file manager."
        _e "See $progname fm -h for help."
        return 1
    fi

    if [[ -d "$SITESDIR/$DOCROOT" ]]; then
        $FM "$SITESDIR/$DOCROOT/" && return
    else
        _e "Site \"$DOCROOT\" does not exist."
    fi

    return
}
export -f sub_fm

####################
#  sub_clone-repo  #
####################
function sub_clone-repo() {
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname clone-repo"
        _w ""
        _w "       Download wpstarter source repository."
        _w "       It will be cloned to \"${purple}$WPSTARTERDIR${normal}\"."
        _w ""
        _w "       After cloning, ${red}DO NOT FORGET to change DB credentials${red} in"
        _w "       ${purple}$WPSTARTERDIR/custom-templates/.env.example${purple}."
        _w ""
        return
    fi

    if [[ ! -d "$WPSTARTERDIR" ]]; then
        $GIT clone https://github.com/tricarte/wpready3 "$WPSTARTERDIR" && \
        # Add post-commit hook to run 'composer wpstarter'
        echo "#!/usr/bin/env bash
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
composer wpstarter" > "$WPSTARTERDIR/.git/hooks/post-commit"
        chmod +x "$WPSTARTERDIR/.git/hooks/post-commit"
        _w ""
        _w "\"${purple}$WPSTARTERREPO${normal}\" has been cloned to \"${purple}$WPSTARTERDIR${normal}\"."
        _w "${red}DO NOT FORGET to change DB credentials${red} in ${purple}$WPSTARTERDIR/custom-templates/.env.example${purple}."
        _w "Now you can use \"wpsite create\" to create a new site."
    else
        _w "\"${purple}$WPSTARTERDIR${normal}\" already exists."
    fi

    return
}
export -f sub_clone-repo

#######################
#  sub_install-theme  #
#######################
function sub_install-theme(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname install-theme <site> <theme-slug>"
        _w ""
        _w "       Install theme to the specified site and activate it."
        _w ""
        return
    fi

    DOCROOT=$1
    THEME_NAME=$2

    if [[ $DOCROOT == "last" ]]; then
        DOCROOT="$(findLastSite)"
    fi

    # If number of arguments is 1 and current directory is a
    # wpstarter installation, then use as $DOCROOT
    if [[ $# == 1 ]]; then
        if [[ -f "$WORKING_DIR_ORIGINAL/wpstarter.json" ]]; then
            DOCROOT=$(basename $WORKING_DIR_ORIGINAL)
            THEME_NAME=$1
        fi
    elif [[ -z $DOCROOT ]]; then
        _e "Err: Specify a site to install the theme."
        _e "See \"$progname install-theme -h\" for help."
        return 1
    fi

    if [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: \"$DOCROOT\" does not exist."
        return 1
    fi

    if [[ -z $THEME_NAME ]]; then
        echo "Err: You didn't specify any theme name to install."
        exit 1
    fi

    $WP theme install "$THEME_NAME" --activate --skip-plugins --path="$SITESDIR/$DOCROOT/public/cms"

    return
}
export -f sub_install-theme

########################
#  sub_install-plugin  #
########################
function sub_install-plugin(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname install-plugin <site> <plugin-slug>"
        _w ""
        _w "       Install plugin to the specified site and activate it."
        _w ""
        return
    fi

    DOCROOT=$1
    PLUGIN_NAME=$2

    if [[ $DOCROOT == "last" ]]; then
        DOCROOT="$(findLastSite)"
    fi

    # If number of arguments is 1 and current directory is a
    # wpstarter installation, then use as $DOCROOT
    if [[ $# == 1 ]]; then
        if [[ -f "$WORKING_DIR_ORIGINAL/wpstarter.json" ]]; then
            DOCROOT=$(basename $WORKING_DIR_ORIGINAL)
            PLUGIN_NAME=$1
        fi
    elif [[ -z $DOCROOT ]]; then
        _e "Err: Specify a site to install the plugin."
        _e "See \"$progname install-plugin -h\" for help."
        return 1
    fi

    if [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: \"$DOCROOT\" does not exist."
        return 1
    fi

    if [[ -z $PLUGIN_NAME ]]; then
        echo "Err: You didn't specify any plugin name to install."
        exit 1
    fi

    $WP plugin install "$PLUGIN_NAME" --activate --skip-plugins --path="$SITESDIR/$DOCROOT/public/cms"

    return
}
export -f sub_install-plugin

#############
#  sub_woo  #
#############
function sub_woo(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname woo"
        _w ""
        _w "       Create a WooCommerce site quickly."
        _w ""
        return
    fi

    DOCROOT=$RANDOM

    $progname quick -n --with-plugin woocommerce --with-theme storefront

    return
}
export -f sub_woo

##################
#  sub_settings  #
##################
function sub_settings(){
    if [[ $SUBHELP ]]; then
        _w "Usage: $progname settings <site_name>"
        _w ""
        _w "       Interactively change necessary WP settings"
        _w "       that are generically set at the site installation."
        _w ""
        return
    fi

    DOCROOT=$1

    if [[ -z $DOCROOT ]]; then
        _e "Err: Specify a directory name. The site will be searched in \"$SITESDIR\"."
        _e "See \"$progname settings -h\" for help."
        return 1
    fi

    if [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: $DOCROOT does not exist in \"$SITESDIR\"."
        return 1
    fi

    # Current site settings
    _w "Getting current site and user settings..."
    _w ""
    curBlogname=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" option get blogname)
    curTagline=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" option get blogdescription)

    # This is login name
    curAdminUsername=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" user get 1 --field=user_login)

    # This are user meta
    curAdminFirstName=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" user meta get 1 first_name)
    curAdminLastName=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" user meta get 1 last_name)

    # nickname is required
    curAdminNickname=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" user meta get 1 nickname)

    # nicename is used as author slug
    curAdminNicename=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" user get 1 --field=user_nicename)

    # This is used in author archive pages as "Author: $display_name" page title
    curAdminDisplayName=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" user get 1 --field=display_name)

    curAdminEmail=$($WP --skip-plugins --path="$SITESDIR/$1/public/cms" user get 1 --field=user_email)

    _w "${red}Site Title${normal}:            $curBlogname"
    _w "${red}Tagline${normal}:               $curTagline"
    _w ""
    _w "Admin User"
    _w "${red}Username (Login name)${normal}: $curAdminUsername"
    _w "${red}First Name${normal}:            $curAdminFirstName"
    _w "${red}Last Name${normal}:             $curAdminLastName"
    _w "${red}Nickname${normal}:              $curAdminNickname"
    _w "${red}Nicename${normal}:              $curAdminNicename"
    _w "${red}Display Name${normal}:          $curAdminDisplayName"
    _w "${red}Email${normal}:                 $curAdminEmail"

    _w ""

    read -p "Site Title (blogname) (Leave empty to use the current value): " -e BLOGNAME
    read -p "Tagline (blogdescription) (Leave empty to use the current value): " -e BLOGDESCRIPTION

    _w ""
    _w "Admin User"
    read -p "First Name (Leave empty to use the current value): " -e ADMINFIRSTNAME
    read -p "Last Name (Leave empty to use the current value): " -e ADMINLASTNAME

    _w ""
    _w "Nickname gives an option to set display name to something other than login name or real name."
    _w "You don't have to specify one."
    read -p "Nick Name (Leave empty to use the current value): " -e ADMINNICKNAME

    _w ""
    _w "Nicename will be used as author slug in author archive URLs."
    _w "It's a good idea to set it to something other than login name."
    _w "Current nice name: ${red}$curAdminNicename${normal}"
    read -p "Nicename (Leave empty to use the current value): " -e ADMINNICENAME

    _w ""
    _w "Display name is used in author archive pages as title such as \"Author: DISPLAY_NAME\"."
    read -p "Display Name (Leave empty to use the current value): " -e ADMINDISPLAYNAME

    read -p "Email (Leave empty to use the current value): " -e ADMINEMAIL
    
    _w ""
    _w "##############################"
    _w "#  These are the new values  #"
    _w "##############################"
    _w ""
    _w "${red}Site Title${normal}:            ${BLOGNAME}"
    _w "${red}Tagline${normal}:               ${BLOGDESCRIPTION}"
    _w ""
    _w "Admin User"
    _w "${red}First Name${normal}:            ${ADMINFIRSTNAME}"
    _w "${red}Last Name${normal}:             ${ADMINLASTNAME}"
    _w "${red}Nickname${normal}:              ${ADMINNICKNAME}"
    _w "${red}Nicename${normal}:              ${ADMINNICENAME}"
    _w "${red}Display Name${normal}:          ${ADMINDISPLAYNAME}"
    _w "${red}Email${normal}:                 ${ADMINEMAIL}"

    read -p "Apply new settings?  (y/n) (Default No): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        _w "New settings discarded."
        return 1
    fi

    # wp user update 1 --display_name="John Doe" --user_nicename="john-doe" --nickname="Editor"

    if [[ -n $BLOGNAME ]] && [[ $BLOGNAME != $curBlogname ]]; then
        $WP --skip-plugins --path="$SITESDIR/$1/public/cms" option update blogname "$BLOGNAME" --quiet
    fi

    if [[ -n $BLOGDESCRIPTION ]] && [[ $BLOGDESCRIPTION != $curTagline ]]; then
        $WP --skip-plugins --path="$SITESDIR/$1/public/cms" option update blogdescription "$BLOGDESCRIPTION" --quiet
    fi

    if [[ -n $ADMINFIRSTNAME ]] && [[ $ADMINFIRSTNAME != $curAdminFirstName ]]; then
        $WP --skip-plugins --path="$SITESDIR/$1/public/cms" user meta update 1 first_name "$ADMINFIRSTNAME" --quiet
    fi

    if [[ -n $ADMINLASTNAME ]] && [[ $ADMINLASTNAME != $curAdminLastName ]]; then
        $WP --skip-plugins --path="$SITESDIR/$1/public/cms" user meta update 1 first_name "$ADMINLASTNAME" --quiet
    fi

    if [[ -n $ADMINNICKNAME ]] && [[ $ADMINNICKNAME != $curAdminNickname ]]; then
        $WP --skip-plugins --path="$SITESDIR/$1/public/cms" user meta update 1 nickname "$ADMINNICKNAME" --quiet
    fi

    if [[ -n $ADMINNICENAME ]] && [[ $ADMINNICENAME != $curAdminNicename ]]; then
        $WP --skip-plugins --path="$SITESDIR/$1/public/cms" user update 1 --user_nicename="$ADMINNICENAME" --quiet
    fi

    if [[ -n $ADMINDISPLAYNAME ]] && [[ $ADMINDISPLAYNAME != $curAdminDisplayName ]]; then
        $WP --skip-plugins --path="$SITESDIR/$1/public/cms" user update 1 --display_name="$ADMINDISPLAYNAME" --quiet
    fi

    if [[ -n $ADMINEMAIL ]] && [[ $ADMINEMAIL != $curAdminEmail ]]; then
        $WP --skip-plugins --path="$SITESDIR/$1/public/cms" user update 1 --user_email="$ADMINEMAIL" --skip-email --quiet
    fi

    $WP --skip-plugins --path="$SITESDIR/$1/public/cms" cache flush --quiet > /dev/null 2>&1
    _w ""
    _w "New settings applied."

    return
}
export -f sub_settings

###############
#  sub_flush-env  #
###############
function sub_flush-env(){
    if [[ $SUBHELP ]]; then
            _w "Usage: $progname flush-env <site_name>"
            _w ""
            _w "       Delete and rebuild .env.cached.php file of a site."
            _w ""
            return
    fi

    DOCROOT="$1"

    if [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
        _e "Err: \"$DOCROOT\" does not exist."
        return 1
    fi

    if [[ -f "$SITESDIR/$DOCROOT/.env.cached.php" ]]; then
        rm -f "$SITESDIR/$DOCROOT/.env.cached.php"
        $WP --skip-plugins --skip-packages --path="$SITESDIR/$DOCROOT/public/cms" > /dev/null 2>&1
        if [[ ! -f "$SITESDIR/$DOCROOT/.env.cached.php" ]]; then
            _e ".env.cached.php file could not be created."
        fi
    fi

    return
}
export -f sub_flush-env

################
#  sub_config  #
################
function sub_config(){
    if [[ $SUBHELP ]]; then
            _w "Usage: $progname config"
            _w ""
            _w "       Create .wpsiterc config file in $HOME."
            _w ""
            return
    fi

    DOCROOT="$1"

    if [[ ! -f "$HOME/.wpsiterc" ]]; then
        echo "# Uncomment the line to make a change.
# These are the defaults. 
# Most of the time you only have to change db credentials.

# MySQL/MariaDB credentials
# DBUSER=\"root\"
# DBPASS=\"vagrant\"

# MySQL/MariaDB Host Settings
# DBHOST=\"localhost\"
# DBPORT=\"3306\"

# Where to host sites 
# SITESDIR=\"\$HOME/sites\"

# Where to store/retore backups
# BACKUPSDIR=\"\$HOME/backups/sites\"

# You really don't have to change this unless you fork it
# WPSTARTERREPO=\"https://github.com/tricarte/wpready3\"

# Clone of above repo, downloadable with \"wpsite clone-repo\"
# WPSTARTERDIR=\"\$HOME/repos/wpready3\"

# How many backups to keep while using \"wpsite backup your-site --purge\"
# NUMBACKUPSTOKEEP=2" > "$HOME/.wpsiterc" && _w ".wpsiterc file created in $HOME." \
        && _w "Edit it now according to your preferences."
    else
        _e ".wpsiterc config file already exists in $HOME."
    fi

    return
}
export -f sub_config

################
#  sub_testdb  #
################
function sub_testdb(){
    if [[ $SUBHELP ]]; then
            _w "Usage: $progname testdb"
            _w ""
            _w "       Make a connection to DB to test user credentials stored in \"~/.wpsiterc\"."
            _w ""
            return
    fi

    if checkDBCredentials; then
        _w "DB credentials in $HOME/.wpsiterc are correct."
    else
        _e "Cannot connect to database using specified credentials in $HOME/.wpsiterc."
        _e "Check \".wpsiterc\" in $HOME."
        _e "or issue the command \"$progname config\" if not exists."
    fi

    if checkDBCredentials wpstarter; then
        _w "DB credentials in $WPSTARTERDIR/custom-templates/.env.example are correct"
    else
        _w ""
        _e "Cannot connect to database using specified credentials in $WPSTARTERDIR/custom-templates/.env.example."
    fi

    return
}
export -f sub_testdb

# Used by sub_create
#################
#  sub_install  #
#################
function sub_install() {
	DOCROOT="$1"

    # Use pwd if a directory (site) is not given.
    # This is only possible when you install a tricarte/wpready3 site
    # through one of its composer scripts defined in composer.json like this:
    # "scripts": {
    #     "installwp": [
    #         "wpsite install"
    #     ]
    # }
	if [[ -z $DOCROOT ]]; then
	    if [[ -f "$PWD/wpstarter.json" ]]; then
            SITESDIR=$(dirname $PWD)
            DOCROOT=$(basename $PWD)
            if [[ ! -f "$SITESDIR/$DOCROOT/.env" ]]; then
                $COMPOSERBIN --working-dir="$SITESDIR/$DOCROOT" install
            fi
        else
            _e "This directory is not a wpstarter based project."
            exit 1
        fi
    fi

    # TODO: check sites is already installed

	# wpstarter copies custom-templates/.env.example to the root at installation.
	# So don't git add the .env.example file at the project root.
	if [[ ! -f "$SITESDIR/$DOCROOT/.env" ]]; then
		mv "$SITESDIR/$DOCROOT/custom-templates/.env.example" "$SITESDIR/$DOCROOT/.env"
		# SITENAME=${PWD##*/}
		SITENAME=$DOCROOT
		if grep directory-basename "$SITESDIR/$DOCROOT/.env" > /dev/null 2>&1; then
            replace -s directory-basename "$DOCROOT" -- "$SITESDIR/$DOCROOT/.env"
        fi
	fi

	# TODO: php-fpm must be reloaded
	# TODO: change currently active php-fpm php.ini file
	# TODO: This will ask for sudo password.
	if [[ $PRODUCTION ]]; then
		echo "
		[HOST=$DOCROOT]
		open_basedir = $SITESDIR/$DOCROOT:/tmp
		" | sudo tee -a /etc/php/7.4/fpm/php.ini
	fi

	if [[ $PRODUCTION ]]; then
		ADMIN_USER="$DOCROOT-$RANDOM"
		ADMIN_PASS=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13)

		# Create separate db user and password, change .env file.
		eval $(grep DB_USER "$SITESDIR/$DOCROOT/.env")
		eval $(grep DB_PASSWORD "$SITESDIR/$DOCROOT/.env")

		NEW_DB_USER="$DOCROOT-$RANDOM"
		NEW_DB_PASSWORD=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13)
		$MYSQLBIN -u $DB_USER -p$DB_PASSWORD -e"CREATE USER '$NEW_DB_USER'@'localhost' IDENTIFIED BY '$NEW_DB_PASSWORD';"
		$MYSQLBIN -u $DB_USER -p$DB_PASSWORD -e"GRANT ALL PRIVILEGES ON \`$DOCROOT\`.* TO '$NEW_DB_USER'@'localhost';"
		# TODO: Do we need to apply FLUSH PRIVILEGES;

		# Now change .env with new values
		replace -s DB_USER=$DB_USER "DB_USER=$NEW_DB_USER" -- "$SITESDIR/$DOCROOT/.env"
		replace -s DB_PASSWORD=$DB_PASSWORD "DB_PASSWORD=$NEW_DB_PASSWORD" -- "$SITESDIR/$DOCROOT/.env"
	else
		ADMIN_USER="usr${DOCROOT}"
		ADMIN_PASS="pss${DOCROOT}"
	fi

	if [[ $PRODUCTION ]]; then
		replace -s wp-home "https://${DOCROOT}" -- "$SITESDIR/$DOCROOT/.env"
		URL="$DOCROOT"
	else
		replace -s wp-home "http://${DOCROOT}.test" -- "$SITESDIR/$DOCROOT/.env"
		URL="$DOCROOT.test"
	fi

	$WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins db create

	$WP --path="$SITESDIR/$DOCROOT/public/cms" core install \
		--url="$URL" \
		--title="${DOCROOT}"  \
		--admin_user="$ADMIN_USER" \
		--admin_password="$ADMIN_PASS"  \
		--admin_email=info@example.com  \
		--skip-email --skip-plugins

	# If this is production, change fs permissions accordingly.
	# Make content directory group owned by www-data
	if [[ $PRODUCTION ]]; then
		if [[ -d "$SITESDIR/$DOCROOT/public/content" ]]; then
			# chmod -R o+w "/home/$(whoami)/sites/$SITENAME/public/content"
            # if grep www-data /etc/group | grep $(whoami) > 2>&1; then
            if id -nG | grep www-data > /dev/null 2>&1; then
                chown -R $(whoami):www-data "$SITESDIR/$DOCROOT/public/content"
            fi
		fi
	fi

	$WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins user update 1 --display_name="John Doe" --user_nicename="john-doe" --nickname="Editor"

	if [[ ! $BARE ]]; then
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update permalink_structure "/%category%/%postname%/"

        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins term update category 1 --slug=general --name=General

        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins post create --post_title="Front Page" --post_type=page --post_status=publish --post_author=1
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins post create --post_title="Blog Page" --post_type=page --post_status=publish --post_author=1

        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update page_on_front 2
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update page_for_posts 5
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update show_on_front "page"
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update timezone_string "Europe/Istanbul"
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update blogdescription "WP Test Site" # Tagline
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update ping_sites ""
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update rss_use_excerpt 1

        # Disable comments
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update default_pingback_flag 0
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update default_ping_status 0
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update default_comment_status 0
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update comment_registration 1
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update close_comments_for_old_posts 1

        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins plugin activate \
            safe-svg \
            custom-post-type-permalinks \
            duplicate-post \
            pre-publish-checklist \
            widget-shortcode \
            passwords-evolved \
            admin-menu-search \
            rest-api-toolbox \
            icon-block \
            rollback-update-failure \
            reveal-ids-for-wp-admin-25 \
            clarity-ad-blocker \
            apcu-manager \
            surge \
            fluent-smtp \
            log-http-requests \
            gutenberg

        if [[ $PRODUCTION ]]; then
            $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins plugin activate patchstack
        fi

        if [[ ! $PRODUCTION ]]; then
            $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins plugin activate \
                query-monitor \
                custom-post-type-ui \
                bulk-delete \
                better-search-replace \
                wayfinder \
                block-xray-attributes \
                wpready-playground \
                show-hooks \
                wp-mailhog-smtp \
                rewrite-rules-inspector
        fi

        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update rest-api-toolbox-settings-core \
        --format=json '{"require-authentication|\/wp\/v2\/posts":"1","require-authentication|'\
'\/wp\/v2\/pages":"1","require-authentication|\/wp\/v2\/users":"1",'\
'"require-authentication|\/wp\/v2\/media":"1","require-authentication|\/wp\/v2\/categories":"1",'\
'"require-authentication|\/wp\/v2\/tags":"1","require-authentication|\/wp\/v2\/comments":"1",'\
'"require-authentication|\/wp\/v2\/taxonomies":"1","require-authentication|\/wp\/v2\/types":"1",'\
'"require-authentication|\/wp\/v2\/statuses":"1","require-authentication|\/wp\/v2\/settings":"1"}'

        # This admin notice always appear.
        # $WP --skip-plugins option update duplicate_post_show_notice 0

        # $WP --skip-plugins user meta update 1 dismissed_wp_pointers "piklist_demos,custom-post-type-permalinks-settings"
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins user meta update 1 dismissed_wp_pointers "custom-post-type-permalinks-settings"

        CPTP_VERSION=$($WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins plugin get custom-post-type-permalinks --format=table --field=version)
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update cptp_permalink_checked "$CPTP_VERSION" --autoload=yes

        # APCU Manager options
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update apcm_adminbar 0
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update apcm_earlyloading 1
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update apcm_analytics 0
        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins option update apcm_gc 0

        $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins rewrite flush

        # Install sample images
        if [[ ! $PRODUCTION ]]; then
            $WP --path="$SITESDIR/$DOCROOT/public/cms" --skip-plugins media import $SITESDIR/$DOCROOT/sample-images/* --user="usr${DOCROOT}"
        fi

        # Create link to adminer that can be accessible from http://site/adminer
        if [[ ! $PRODUCTION ]]; then
            if [[ -d "$SITESDIR/$DOCROOT/vendor/dg/adminer-custom" ]]; then
                ln -rs "$SITESDIR/$DOCROOT/vendor/dg/adminer-custom/" "$SITESDIR/$DOCROOT/public/adminer"
            fi
        fi
    fi

	_w "WordPress installation finished."

    _w "WP Admin Username: $ADMIN_USER"
    _w "WP Admin Password: $ADMIN_PASS"
}
export -f sub_install

##########################
#  sub_command handling  #
##########################
case $subcommand in
    "" | "-h" | "--help" | "help")
        sub_default
        ;;
    *)
        shift
        if [[ "$(type -t "sub_${subcommand}")" == 'function' ]]; then
            "sub_${subcommand}" "$@"
            exit $?
        else
            _e "Error: '$subcommand' is not a known subcommand." >&2
            _e "Run '$progname --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac

# function sub_functionName(){
#     if [[ $SUBHELP ]]; then
#             _w "Usage: $progname function_name"
#             _w ""
#             _w "       Usage help."
#             _w ""
#             return
#     fi
#
#     DOCROOT="$1"
#
#     if [[ ! -d "$SITESDIR/$DOCROOT" ]]; then
#         _e "Err: \"$DOCROOT\" does not exist."
#         return 1
#     fi
#
#     return
# }
# export -f sub_functionName
